generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id // Use String for User id
  name          String
  username      String    @unique
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          String  @default("UNKNOW")
}

model ProductStock {
  id           String     @id // Use String for ProductStock id
  name         String
  imageProduct String?
  price        Float
  stock        Float
  cat          String
  category     Category   @relation(fields: [cat], references: [id])

  Product Product[] // Relation to Product
}

model Product {
  id            String          @id // Use String for Product id
  productId     String
  productstock  ProductStock    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellprice     Float
  createdAt     DateTime        @default(now())
  OnSaleProduct OnSaleProduct[] // Relation to OnSaleProduct

  @@unique([productId])
}

model OnSaleProduct {
  id            String      @id // Use String for OnSaleProduct id
  productId     String
  quantity      Int
  saledate      DateTime    @default(now())
  transactionId String
  product       Product     @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: Cascade)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([productId, transactionId])
}

model Transaction {
  id            String      @id
  totalAmount   Decimal?
  createdAt     DateTime    @default(now())
  isComplete    Boolean     @default(false)
  orderType     String?     // New field: Eat In or Takeaway
  paymentMethod String?     // New field: Cash or Card
  products      OnSaleProduct[]
}

model ShopData {
  id    String @id // Use String for ShopData id
  tax   Int?
  name  String?
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  ProductStock ProductStock[] // Relation to ProductStock
}
